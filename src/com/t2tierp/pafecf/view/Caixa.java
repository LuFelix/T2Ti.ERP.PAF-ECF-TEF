/**
 * <p>Title: T2Ti ERP</p>
 * <p>Description: PAF-ECF + TEF - Tela do Caixa.</p>
 *
 * <p>The MIT License</p>
 *
 * <p>Copyright: Copyright (C) 2010 T2Ti.COM</p>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 *       The author may be contacted at:
 *           t2ti.com@gmail.com</p>
 *
 * @author Albert Eije (T2Ti.COM)
 * @version 1.0
 */
package com.t2tierp.pafecf.view;

import com.t2tierp.pafecf.controller.MovimentoController;
import com.t2tierp.pafecf.controller.ProdutoController;
import com.t2tierp.pafecf.controller.VendaController;
import com.t2tierp.pafecf.infra.Ecf;
import com.t2tierp.pafecf.infra.Paf;
import com.t2tierp.pafecf.vo.MovimentoVO;
import com.t2tierp.pafecf.vo.ProdutoVO;
import com.t2tierp.pafecf.vo.VendaCabecalhoVO;
import com.t2tierp.pafecf.vo.VendaDetalheVO;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.sql.Date;
import java.text.SimpleDateFormat;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

public class Caixa extends javax.swing.JFrame implements KeyListener, ContainerListener {

    private static int menuAberto = 0; // 0-não | 1-sim
    private static int statusCaixa = 0; // 0-aberto | 1-venda em andamento
    private static int produtoOK = 0; //0-não | 1-ok - cadastrado
    private static int itemCupom = 0;
    private static Double subTotal, totalGeral = 0.0;
    private DefaultListModel modelMenuPrincipal;
    private DefaultListModel modelMenuOperacoes;
    private DefaultListModel modelMenuFiscal;
    private DefaultListModel modelMenuECF;
    private DefaultListModel modelBobina;
    private DefaultListModel modelSubMenuCliente;
    private DefaultListModel modelSubMenuGerente;
    private DefaultListModel modelSubMenuSupervisor;
    private MovimentoVO movimentoVO;
    private VendaCabecalhoVO vendaCabecalhoVO;
    private ProdutoVO produtoVO;
    private ArrayList<VendaDetalheVO> listaVendaDetalheVO;
    SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
    java.util.Date d = new java.util.Date();

    /** Creates new form Caixa */
    public Caixa() {
        initComponents();
        this.setSize(1024, 738);
        keyListenerRecursivo(rootPane);
        modelBobina = new DefaultListModel();
        bobina.setModel(modelBobina);
        definirMenuPrincipal();
        definirMenuOperacoes();
        definirMenuFiscal();
        definirMenuECF();
        definirSubMenuCliente();
        definirSubMenuGerente();
        definirSubMenuSupervisor();
        telaPadrao();
        movimentoVO = new MovimentoController().verificaMovimento();
        if (movimentoVO.getId() != 0) {
            MovimentoAberto ma = new MovimentoAberto(this, true, movimentoVO);
            ma.setLocationRelativeTo(null);
            ma.setVisible(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        panelSubMenu = new javax.swing.JPanel();
        panelCard = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaSubMenuCliente = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        listaSubMenuGerente = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        listaSubMenuSupervisor = new javax.swing.JList();
        jLabel10 = new javax.swing.JLabel();
        panelMenuPrincipal = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaMenuPrincipal = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        panelMenuOperacoes = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaMenuOperacoes = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        panelMenuFiscal = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        listaMenuFiscal = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        panelMenuECF = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        listaMenuECF = new javax.swing.JList();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        bobina = new javax.swing.JList();
        editValorUnitario = new javax.swing.JFormattedTextField();
        editCodigo = new javax.swing.JFormattedTextField();
        editQuantidade = new javax.swing.JFormattedTextField();
        editSubTotal = new javax.swing.JFormattedTextField();
        editValorTotal = new javax.swing.JFormattedTextField();
        labelImagemProduto = new javax.swing.JLabel();
        labelDescricao = new javax.swing.JLabel();
        labelTotalGeral = new javax.swing.JLabel();
        mensagens = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1024, 738));
        setResizable(false);
        setUndecorated(true);
        getContentPane().setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        jLayeredPane1.setPreferredSize(new java.awt.Dimension(1024, 738));

        jPanel1.setBackground(new Color(255,255,255,0));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        jButton1.setBackground(new Color(255,255,255,0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("F1");
        jButton1.setToolTipText("F1 - Ajuda do Sistema");
        jButton1.setBorder(null);
        jButton1.setFocusable(false);
        jButton1.setInheritsPopupMenu(true);
        jButton1.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton1.setRequestFocusEnabled(false);
        jButton1.setRolloverEnabled(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton2.setBackground(new Color(255,255,255,0));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("F2");
        jButton2.setToolTipText("F2 - Menu Principal");
        jButton2.setBorder(null);
        jButton2.setFocusable(false);
        jButton2.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton2.setRequestFocusEnabled(false);
        jButton2.setRolloverEnabled(false);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
        });
        jPanel1.add(jButton2);

        jButton3.setBackground(new Color(255,255,255,0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("F3");
        jButton3.setToolTipText("F3 - Menu Operações");
        jButton3.setBorder(null);
        jButton3.setFocusable(false);
        jButton3.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton3.setRequestFocusEnabled(false);
        jButton3.setRolloverEnabled(false);
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton3MouseEntered(evt);
            }
        });
        jPanel1.add(jButton3);

        jButton4.setBackground(new Color(255,255,255,0));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("F4");
        jButton4.setToolTipText("F4 - Menu Fiscal");
        jButton4.setBorder(null);
        jButton4.setFocusable(false);
        jButton4.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton4.setRequestFocusEnabled(false);
        jButton4.setRolloverEnabled(false);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton4MouseEntered(evt);
            }
        });
        jPanel1.add(jButton4);

        jButton5.setBackground(new Color(255,255,255,0));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("F5");
        jButton5.setToolTipText("F5 - Menu ECF");
        jButton5.setBorder(null);
        jButton5.setFocusable(false);
        jButton5.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton5.setRequestFocusEnabled(false);
        jButton5.setRolloverEnabled(false);
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton5MouseEntered(evt);
            }
        });
        jPanel1.add(jButton5);

        jButton6.setBackground(new Color(255,255,255,0));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("F6");
        jButton6.setToolTipText("F6 - Inicia Venda");
        jButton6.setBorder(null);
        jButton6.setFocusable(false);
        jButton6.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton6.setRequestFocusEnabled(false);
        jButton6.setRolloverEnabled(false);
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton6MouseEntered(evt);
            }
        });
        jPanel1.add(jButton6);

        jButton7.setBackground(new Color(255,255,255,0));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("F7");
        jButton7.setToolTipText("F7 - Encerra Venda");
        jButton7.setBorder(null);
        jButton7.setFocusable(false);
        jButton7.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton7.setRequestFocusEnabled(false);
        jButton7.setRolloverEnabled(false);
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton7MouseEntered(evt);
            }
        });
        jPanel1.add(jButton7);

        jButton8.setBackground(new Color(255,255,255,0));
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("F8");
        jButton8.setToolTipText("F8 - Cancela Item");
        jButton8.setBorder(null);
        jButton8.setFocusable(false);
        jButton8.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton8.setRequestFocusEnabled(false);
        jButton8.setRolloverEnabled(false);
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton8MouseEntered(evt);
            }
        });
        jPanel1.add(jButton8);

        jButton9.setBackground(new Color(255,255,255,0));
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("F9");
        jButton9.setToolTipText("F9 - Cancela Cupom");
        jButton9.setBorder(null);
        jButton9.setFocusable(false);
        jButton9.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton9.setRequestFocusEnabled(false);
        jButton9.setRolloverEnabled(false);
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton9MouseEntered(evt);
            }
        });
        jPanel1.add(jButton9);

        jButton10.setBackground(new Color(255,255,255,0));
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("F10");
        jButton10.setToolTipText("F10 - Concede Desconto");
        jButton10.setBorder(null);
        jButton10.setFocusable(false);
        jButton10.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton10.setRequestFocusEnabled(false);
        jButton10.setRolloverEnabled(false);
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton10MouseEntered(evt);
            }
        });
        jPanel1.add(jButton10);

        jButton11.setBackground(new Color(255,255,255,0));
        jButton11.setForeground(new java.awt.Color(255, 255, 255));
        jButton11.setText("F11");
        jButton11.setToolTipText("F11 - Aciona Gaveta");
        jButton11.setBorder(null);
        jButton11.setFocusable(false);
        jButton11.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton11.setRequestFocusEnabled(false);
        jButton11.setRolloverEnabled(false);
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton11MouseEntered(evt);
            }
        });
        jPanel1.add(jButton11);

        jButton12.setBackground(new Color(255,255,255,0));
        jButton12.setForeground(new java.awt.Color(255, 255, 255));
        jButton12.setText("F12");
        jButton12.setToolTipText("F12 - Sai do Caixa");
        jButton12.setBorder(null);
        jButton12.setFocusable(false);
        jButton12.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton12.setRequestFocusEnabled(false);
        jButton12.setRolloverEnabled(false);
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton12MouseEntered(evt);
            }
        });
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton12);

        jPanel1.setBounds(645, 10, 370, 30);
        jLayeredPane1.add(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        panelSubMenu.setBackground(new Color(255,255,255,0));
        panelSubMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelCard.setLayout(new java.awt.CardLayout());

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        listaSubMenuCliente.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaSubMenuCliente);

        panelCard.add(jScrollPane1, "card2");

        jScrollPane7.setBorder(null);
        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        listaSubMenuGerente.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane7.setViewportView(listaSubMenuGerente);

        panelCard.add(jScrollPane7, "card3");

        jScrollPane8.setBorder(null);
        jScrollPane8.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        listaSubMenuSupervisor.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane8.setViewportView(listaSubMenuSupervisor);

        panelCard.add(jScrollPane8, "card4");

        panelSubMenu.add(panelCard, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 22, 450, 180));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/layout/SubMenu.png"))); // NOI18N
        panelSubMenu.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        panelSubMenu.setBounds(30, 20, 467, 212);
        jLayeredPane1.add(panelSubMenu, javax.swing.JLayeredPane.DEFAULT_LAYER);

        panelMenuPrincipal.setBackground(new Color(255,255,255,0));
        panelMenuPrincipal.setPreferredSize(new java.awt.Dimension(213, 200));
        panelMenuPrincipal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Menu Principal");
        panelMenuPrincipal.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, 190, -1));

        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        listaMenuPrincipal.setFont(new java.awt.Font("Tahoma", 1, 12));
        listaMenuPrincipal.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaMenuPrincipal.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaMenuPrincipal.setAutoscrolls(false);
        jScrollPane2.setViewportView(listaMenuPrincipal);

        panelMenuPrincipal.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 35, 200, 160));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/layout/Menu.png"))); // NOI18N
        panelMenuPrincipal.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        panelMenuPrincipal.setBounds(685, 40, 213, 200);
        jLayeredPane1.add(panelMenuPrincipal, javax.swing.JLayeredPane.DEFAULT_LAYER);

        panelMenuOperacoes.setBackground(new Color(255,255,255,0));
        panelMenuOperacoes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Menu Operações");
        panelMenuOperacoes.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, 190, -1));

        jScrollPane4.setBorder(null);
        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        listaMenuOperacoes.setFont(new java.awt.Font("Tahoma", 1, 12));
        listaMenuOperacoes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaMenuOperacoes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaMenuOperacoes.setAutoscrolls(false);
        jScrollPane4.setViewportView(listaMenuOperacoes);

        panelMenuOperacoes.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 35, 200, 160));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/layout/Menu.png"))); // NOI18N
        panelMenuOperacoes.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        panelMenuOperacoes.setBounds(715, 40, 213, 200);
        jLayeredPane1.add(panelMenuOperacoes, javax.swing.JLayeredPane.DEFAULT_LAYER);

        panelMenuFiscal.setBackground(new Color(255,255,255,0));
        panelMenuFiscal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Menu Fiscal");
        panelMenuFiscal.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, 190, -1));

        jScrollPane5.setBorder(null);
        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        listaMenuFiscal.setFont(new java.awt.Font("Tahoma", 1, 12));
        listaMenuFiscal.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaMenuFiscal.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaMenuFiscal.setAutoscrolls(false);
        listaMenuFiscal.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane5.setViewportView(listaMenuFiscal);

        panelMenuFiscal.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 35, 200, 160));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/layout/Menu.png"))); // NOI18N
        panelMenuFiscal.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        panelMenuFiscal.setBounds(745, 40, 213, 200);
        jLayeredPane1.add(panelMenuFiscal, javax.swing.JLayeredPane.DEFAULT_LAYER);

        panelMenuECF.setBackground(new Color(255,255,255,0));
        panelMenuECF.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16));
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Menu ECF");
        panelMenuECF.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, 190, -1));

        jScrollPane6.setBorder(null);
        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        listaMenuECF.setFont(new java.awt.Font("Tahoma", 1, 12));
        listaMenuECF.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaMenuECF.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaMenuECF.setAutoscrolls(false);
        jScrollPane6.setViewportView(listaMenuECF);

        panelMenuECF.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 35, 200, 160));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/layout/Menu.png"))); // NOI18N
        panelMenuECF.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        panelMenuECF.setBounds(775, 40, 213, 200);
        jLayeredPane1.add(panelMenuECF, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane3.setBorder(null);
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        bobina.setBackground(new java.awt.Color(255, 253, 228));
        bobina.setFont(new java.awt.Font("Courier New", 1, 14));
        bobina.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        bobina.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(bobina);

        jScrollPane3.setBounds(42, 240, 400, 360);
        jLayeredPane1.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        editValorUnitario.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        editValorUnitario.setBorder(null);
        editValorUnitario.setEditable(false);
        editValorUnitario.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        editValorUnitario.setText("0,00");
        editValorUnitario.setFocusable(false);
        editValorUnitario.setFont(new java.awt.Font("Verdana", 1, 18));
        editValorUnitario.setBounds(490, 462, 200, 30);
        jLayeredPane1.add(editValorUnitario, javax.swing.JLayeredPane.DEFAULT_LAYER);

        editCodigo.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        editCodigo.setBorder(null);
        editCodigo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        editCodigo.setText("0");
        editCodigo.setFont(new java.awt.Font("Verdana", 1, 18));
        editCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                editCodigoFocusLost(evt);
            }
        });
        editCodigo.setBounds(490, 262, 200, 30);
        jLayeredPane1.add(editCodigo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        editQuantidade.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        editQuantidade.setBorder(null);
        editQuantidade.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        editQuantidade.setText("0");
        editQuantidade.setFont(new java.awt.Font("Verdana", 1, 18));
        editQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                editQuantidadeFocusLost(evt);
            }
        });
        editQuantidade.setBounds(490, 362, 200, 30);
        jLayeredPane1.add(editQuantidade, javax.swing.JLayeredPane.DEFAULT_LAYER);

        editSubTotal.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        editSubTotal.setBorder(null);
        editSubTotal.setEditable(false);
        editSubTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        editSubTotal.setText("0,00");
        editSubTotal.setFocusable(false);
        editSubTotal.setFont(new java.awt.Font("Verdana", 1, 18));
        editSubTotal.setBounds(730, 562, 250, 30);
        jLayeredPane1.add(editSubTotal, javax.swing.JLayeredPane.DEFAULT_LAYER);

        editValorTotal.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        editValorTotal.setBorder(null);
        editValorTotal.setEditable(false);
        editValorTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        editValorTotal.setText("0,00");
        editValorTotal.setFocusable(false);
        editValorTotal.setFont(new java.awt.Font("Verdana", 1, 18));
        editValorTotal.setBounds(490, 562, 200, 30);
        jLayeredPane1.add(editValorTotal, javax.swing.JLayeredPane.DEFAULT_LAYER);

        labelImagemProduto.setFocusable(false);
        labelImagemProduto.setBounds(730, 250, 250, 250);
        jLayeredPane1.add(labelImagemProduto, javax.swing.JLayeredPane.DEFAULT_LAYER);

        labelDescricao.setFont(new java.awt.Font("Verdana", 1, 48));
        labelDescricao.setForeground(new java.awt.Color(255, 255, 255));
        labelDescricao.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDescricao.setText("Produto para venda");
        labelDescricao.setBounds(40, 110, 945, 83);
        jLayeredPane1.add(labelDescricao, javax.swing.JLayeredPane.DEFAULT_LAYER);

        labelTotalGeral.setFont(new java.awt.Font("Verdana", 1, 27));
        labelTotalGeral.setForeground(new java.awt.Color(255, 255, 255));
        labelTotalGeral.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTotalGeral.setText("2.785.565,44");
        labelTotalGeral.setFocusable(false);
        labelTotalGeral.setBounds(40, 652, 400, 40);
        jLayeredPane1.add(labelTotalGeral, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mensagens.setFont(new java.awt.Font("Verdana", 1, 18));
        mensagens.setForeground(new java.awt.Color(255, 255, 0));
        mensagens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mensagens.setText("<html>Mensagem grande mensagem grande mensagem grande mensagem grande</html>");
        mensagens.setFocusable(false);
        mensagens.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mensagens.setPreferredSize(new java.awt.Dimension(772, 20));
        mensagens.setBounds(485, 650, 500, 45);
        jLayeredPane1.add(mensagens, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/layout/Tela.jpg"))); // NOI18N
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabel1.setRequestFocusEnabled(false);
        jLabel1.setBounds(0, 0, 1024, 738);
        jLayeredPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        getContentPane().add(jLayeredPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        sair();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        mensagens.setText(jButton1.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        mensagens.setText(jButton2.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseEntered
        mensagens.setText(jButton3.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton3MouseEntered

    private void jButton4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseEntered
        mensagens.setText(jButton4.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton4MouseEntered

    private void jButton5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseEntered
        mensagens.setText(jButton5.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton5MouseEntered

    private void jButton6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseEntered
        mensagens.setText(jButton6.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton6MouseEntered

    private void jButton7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseEntered
        mensagens.setText(jButton7.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton7MouseEntered

    private void jButton8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseEntered
        mensagens.setText(jButton8.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton8MouseEntered

    private void jButton12MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseEntered
        mensagens.setText(jButton12.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton12MouseEntered

    private void jButton9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseEntered
        mensagens.setText(jButton9.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton9MouseEntered

    private void jButton10MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseEntered
        mensagens.setText(jButton10.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton10MouseEntered

    private void jButton11MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseEntered
        mensagens.setText(jButton11.getToolTipText());
        this.repaint();
    }//GEN-LAST:event_jButton11MouseEntered

    private void editQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editQuantidadeFocusLost
        if (statusCaixa == 1) {
            if (produtoOK == 1) {
                // calcula total do item
                Double quantidade = Double.valueOf(editQuantidade.getText());
                Double unitario = Double.valueOf(editValorUnitario.getText());
                Double totalItem = quantidade * unitario;
                editValorTotal.setText(totalItem.toString());
                vendeItem();
                atualizaTotais();
                editCodigo.requestFocus();
            } else {
                editCodigo.requestFocus();
            }
        } else {
            editCodigo.requestFocus();
        }
    }//GEN-LAST:event_editQuantidadeFocusLost

    private void editCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editCodigoFocusLost
        if (statusCaixa == 1) {
            ProdutoController produto = new ProdutoController();
            produtoVO = produto.consulta(editCodigo.getText());
            if (produtoVO.getId() != 0) {
                produtoOK = 1;
                editValorUnitario.setText(produtoVO.getValorVenda().toString());
                labelDescricao.setText(produtoVO.getDescricaoPdv());
                setarImagem(editCodigo.getText() + ".jpg");
            } else {
                produtoOK = 0;
                JOptionPane.showMessageDialog(rootPane, "Produto não cadastrado!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        editValorUnitario.setText("0.00");
                        editValorTotal.setText("0.00");
                        editQuantidade.setText("1");
                        labelDescricao.setText("");
                        editCodigo.requestFocus();
                    }
                });
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_editCodigoFocusLost

// ***************************************************************************//
// Metodos principais e de infra                                              //
// ***************************************************************************//
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Caixa c = new Caixa();
                c.setVisible(true);
            }
        });
    }

    private void sair() {
        String[] opcoes = {"Sim", "Não"};
        int escolha = JOptionPane.showOptionDialog(null, "Deseja sair do sistema?", "Pergunta do Sistema",
                JOptionPane.YES_OPTION, JOptionPane.ERROR_MESSAGE,
                null, opcoes, null);
        if (escolha == 0) {
            System.exit(0);
        }
    }

    private void telaPadrao() {
        labelTotalGeral.requestFocus();
        mensagens.setText("Caixa aberto...");
        editQuantidade.setText("1");
        editCodigo.setText("0");
        editValorUnitario.setText("0,00");
        editValorTotal.setText("0,00");
        editSubTotal.setText("0,00");
        labelTotalGeral.setText("0,00");
        labelDescricao.setText("");
        modelBobina.clear();

        //Implementar Thread para o controle dos banners

        editCodigo.setEditable(false);
        editQuantidade.setEditable(false);
        panelMenuPrincipal.setVisible(false);
        panelMenuOperacoes.setVisible(false);
        panelMenuFiscal.setVisible(false);
        panelMenuECF.setVisible(false);
        panelSubMenu.setVisible(false);

        //
        vendaCabecalhoVO = new VendaCabecalhoVO();
        movimentoVO = new MovimentoVO();
        listaVendaDetalheVO = new ArrayList<VendaDetalheVO>();
        vendaCabecalhoVO.setVendaDetalheVOCollection(listaVendaDetalheVO);

        //
        subTotal = 0.0;
        totalGeral = 0.0;
        setarImagem("padrao.png");
    }

    public String repete(String string, int quantidade) {
        StringBuffer retorno = new StringBuffer();
        for (int j = 0; j < quantidade; j++) {
            retorno.append(string);
        }
        return retorno.toString();
    }

    private void setarImagem(String nome) {
        String caminho = System.getProperty("user.dir") + "\\src\\images\\produtos\\";
        String imagem = caminho + nome;
        ImageIcon img = new ImageIcon(imagem);
        if (img.getIconHeight() < 0) {
            imagem = caminho + "padrao.png";
            img = new ImageIcon(imagem);
        }
        labelImagemProduto.setIcon(img);
    }

// ***************************************************************************//
// Controle do pressionamento das teclas                                      //
// ***************************************************************************//
    /**
     * Adiciona Key Listeners em todos os componentes e filhos recursivamente
     * @param componente
     */
    private void keyListenerRecursivo(Component componente) {
        try {
            componente.addKeyListener(this);
            if (componente instanceof Container) {
                Container cont = (Container) componente;
                cont.addContainerListener(this);
                Component[] children = cont.getComponents();
                for (int i = 0; i < children.length; i++) {
                    keyListenerRecursivo(children[i]);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_F1:
                JOptionPane.showMessageDialog(rootPane, "Ajuda do Sistema");
                break;
            case KeyEvent.VK_F2:
                if (menuAberto == 0) {
                    panelMenuPrincipal.setVisible(true);
                    listaMenuPrincipal.requestFocus();
                    listaMenuPrincipal.setSelectedIndex(0);
                    menuAberto = 1;
                }
                break;
            case KeyEvent.VK_F3:
                if (menuAberto == 0) {
                    panelMenuOperacoes.setVisible(true);
                    listaMenuOperacoes.requestFocus();
                    listaMenuOperacoes.setSelectedIndex(0);
                    menuAberto = 1;
                }
                break;
            case KeyEvent.VK_F4:
                if (menuAberto == 0) {
                    panelMenuFiscal.setVisible(true);
                    listaMenuFiscal.requestFocus();
                    listaMenuFiscal.setSelectedIndex(0);
                    menuAberto = 1;
                }
                break;
            case KeyEvent.VK_F5:
                if (menuAberto == 0) {
                    panelMenuECF.setVisible(true);
                    listaMenuECF.requestFocus();
                    listaMenuECF.setSelectedIndex(0);
                    menuAberto = 1;
                }
                break;
            case KeyEvent.VK_F6:
                iniciaVenda();
                break;
            case KeyEvent.VK_F7:
                iniciaEncerramentoVenda();
                break;
            case KeyEvent.VK_F8:
                cancelaItem();
                break;
            case KeyEvent.VK_F9:
                cancelaCupom();
                break;
            case KeyEvent.VK_F10:
                descontoValor();
                break;
            case KeyEvent.VK_F11:
                JOptionPane.showMessageDialog(rootPane, "Teclou F11!");
                break;
            case KeyEvent.VK_F12:
                sair();
                break;
            case KeyEvent.VK_ESCAPE:
                teclouESC(e);
                break;
            case KeyEvent.VK_ENTER:
                teclouEnter(e);
                break;
            case KeyEvent.VK_UP:
                teclouSetaAcima(e);
                break;
            case KeyEvent.VK_DOWN:
                teclouSetaAbaixo(e);
                break;
        }
    }

    private void teclouEnter(KeyEvent e) {
        if (e.getSource().equals(listaMenuPrincipal)) {
            //cliente
            if (listaMenuPrincipal.getSelectedIndex() == 0) {
                panelSubMenu.setVisible(true);
                panelSubMenu.setLocation(430, 240);
                ((CardLayout) panelCard.getLayout()).show(panelCard, "card2");
                listaSubMenuCliente.requestFocus();
                listaSubMenuCliente.setSelectedIndex(0);
            }
            //calculadora
            if (listaMenuPrincipal.getSelectedIndex() == 1) {
                try {
                    Runtime.getRuntime().exec("calc.exe");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
            //gerente
            if (listaMenuPrincipal.getSelectedIndex() == 4) {
                panelSubMenu.setVisible(true);
                panelSubMenu.setLocation(430, 240);
                ((CardLayout) panelCard.getLayout()).show(panelCard, "card3");
                listaSubMenuGerente.requestFocus();
                listaSubMenuGerente.setSelectedIndex(0);
            }
            //supervisor
            if (listaMenuPrincipal.getSelectedIndex() == 3) {
                panelSubMenu.setVisible(true);
                panelSubMenu.setLocation(430, 240);
                ((CardLayout) panelCard.getLayout()).show(panelCard, "card4");
                listaSubMenuSupervisor.requestFocus();
                listaSubMenuSupervisor.setSelectedIndex(0);
            }
        }
        if (e.getSource().equals(listaSubMenuCliente)) {
            //identifica cliente
            if (listaSubMenuCliente.getSelectedIndex() == 0) {
                IdentificaCliente.main(new String[1]);
            }
        }
        if (e.getSource().equals(listaSubMenuSupervisor)) {
            //inicia movimento
            if (listaSubMenuSupervisor.getSelectedIndex() == 0) {
                iniciaMovimento();
            }
            //encerra movimento
            if (listaSubMenuSupervisor.getSelectedIndex() == 1) {
                encerraMovimento();
            }
            //suprimento
            if (listaSubMenuSupervisor.getSelectedIndex() == 4) {
                suprimento();
            }
            //sangria
            if (listaSubMenuSupervisor.getSelectedIndex() == 5) {
                sangria();
            }
            //acrescimo em dinheiro no cupom
            if (listaSubMenuSupervisor.getSelectedIndex() == 7) {
                acrescimoValor();
            }
            //acrescimo percentual no cupom
            if (listaSubMenuSupervisor.getSelectedIndex() == 8) {
                acrescimoTaxa();
            }
            //desconto em dinheiro no cupom
            if (listaSubMenuSupervisor.getSelectedIndex() == 9) {
                descontoValor();
            }
            //desconto percentual no cupom
            if (listaSubMenuSupervisor.getSelectedIndex() == 10) {
                descontoTaxa();
            }
        }
        if (e.getSource().equals(listaSubMenuGerente)) {
            //inicia movimento
            if (listaSubMenuGerente.getSelectedIndex() == 0) {
                iniciaMovimento();
            }
            //encerra movimento
            if (listaSubMenuGerente.getSelectedIndex() == 1) {
                encerraMovimento();
            }
            //suprimento
            if (listaSubMenuGerente.getSelectedIndex() == 4) {
                suprimento();
            }
            //sangria
            if (listaSubMenuGerente.getSelectedIndex() == 5) {
                sangria();
            }
            //acrescimo em dinheiro no cupom
            if (listaSubMenuGerente.getSelectedIndex() == 7) {
                acrescimoValor();
            }
            //acrescimo percentual no cupom
            if (listaSubMenuGerente.getSelectedIndex() == 8) {
                acrescimoTaxa();
            }
            //desconto em dinheiro no cupom
            if (listaSubMenuGerente.getSelectedIndex() == 9) {
                descontoValor();
            }
            //desconto percentual no cupom
            if (listaSubMenuGerente.getSelectedIndex() == 10) {
                descontoTaxa();
            }
            //consultar cliente
            if (listaSubMenuGerente.getSelectedIndex() == 15) {
                ImportaCliente.main(new String[1]);
            }
        }
        if (e.getSource().equals(listaMenuOperacoes)) {
            //carrega pre-venda
            if (listaMenuOperacoes.getSelectedIndex() == 2) {
                carregaPreVenda();
            }
            //mescla pre-venda
            if (listaMenuOperacoes.getSelectedIndex() == 3) {
                mesclaPreVenda();
            }
            //carrega dav
            if (listaMenuOperacoes.getSelectedIndex() == 4) {
                carregaDAV();
            }
            //mescla dav
            if (listaMenuOperacoes.getSelectedIndex() == 5) {
                mesclaDAV();
            }
        }
        if (e.getSource().equals(listaMenuFiscal)) {
            //LMFC
            if (listaMenuFiscal.getSelectedIndex() == 1) {
                LMFC.main(new String[1]);
            }
            //LMFS
            if (listaMenuFiscal.getSelectedIndex() == 2) {
                LMFS.main(new String[1]);
            }
            //Espelho MFD
            if (listaMenuFiscal.getSelectedIndex() == 3) {
                EspelhoMFD.main(new String[1]);
            }
            //Arquivo MFD
            if (listaMenuFiscal.getSelectedIndex() == 4) {
                ArquivoMFD.main(new String[1]);
            }
            //Tabela de Produtos
            if (listaMenuFiscal.getSelectedIndex() == 5) {
                Paf.geraTabelaProdutos();
            }
            //Estoque
            if (listaMenuFiscal.getSelectedIndex() == 6) {
                Paf.geraArquivoEstoque();
            }
            //Movimento ECF
            if (listaMenuFiscal.getSelectedIndex() == 7) {
                MovimentoECF.main(new String[1]);
            }
            //Meios de Pagamento
            if (listaMenuFiscal.getSelectedIndex() == 8) {
                MeiosPagamento.main(new String[1]);
            }
            //DAV Emitidos
            if (listaMenuFiscal.getSelectedIndex() == 9) {
                DAVEmitidos.main(new String[1]);
            }
            //Identificação PAF-ECF
            if (listaMenuFiscal.getSelectedIndex() == 10) {
                Paf.identificacaoPafEcf();
            }
            //Vendas no período
            if (listaMenuFiscal.getSelectedIndex() == 11) {
                VendasPeriodo.main(new String[1]);
            }
        }

    }

    private void teclouESC(KeyEvent e) {
        if (e.getSource().equals(listaMenuPrincipal)) {
            panelMenuPrincipal.setVisible(false);
            menuAberto = 0;
        }
        if (e.getSource().equals(listaMenuOperacoes)) {
            panelMenuOperacoes.setVisible(false);
            menuAberto = 0;
        }
        if (e.getSource().equals(listaMenuFiscal)) {
            panelMenuFiscal.setVisible(false);
            menuAberto = 0;
        }
        if (e.getSource().equals(listaMenuECF)) {
            panelMenuECF.setVisible(false);
            menuAberto = 0;
        }
        if (e.getSource().equals(listaSubMenuCliente)
                || e.getSource().equals(listaSubMenuGerente)
                || e.getSource().equals(listaSubMenuSupervisor)) {
            panelSubMenu.setVisible(false);
            listaMenuPrincipal.requestFocus();
            listaMenuPrincipal.setSelectedIndex(0);
        }
    }

    private void teclouSetaAcima(KeyEvent e) {
        String selecionado = "";

        if (e.getSource().equals(listaMenuPrincipal)) {
            if (listaMenuPrincipal.getSelectedIndex() == 0) {
                selecionado = (String) modelMenuPrincipal.get(listaMenuPrincipal.getSelectedIndex());
            } else {
                selecionado = (String) modelMenuPrincipal.get(listaMenuPrincipal.getSelectedIndex() - 1);
            }
        }

        if (e.getSource().equals(listaMenuOperacoes)) {
            if (listaMenuOperacoes.getSelectedIndex() == 0) {
                selecionado = (String) modelMenuOperacoes.get(listaMenuOperacoes.getSelectedIndex());
            } else {
                selecionado = (String) modelMenuOperacoes.get(listaMenuOperacoes.getSelectedIndex() - 1);
            }
        }

        if (e.getSource().equals(listaMenuFiscal)) {
            if (listaMenuFiscal.getSelectedIndex() == 0) {
                selecionado = (String) modelMenuFiscal.get(listaMenuFiscal.getSelectedIndex());
            } else {
                selecionado = (String) modelMenuFiscal.get(listaMenuFiscal.getSelectedIndex() - 1);
            }
        }

        mensagens.setText(selecionado);
        this.repaint();
    }

    private void teclouSetaAbaixo(KeyEvent e) {
        String selecionado = "";

        if (e.getSource().equals(listaMenuPrincipal)) {
            if (listaMenuPrincipal.getSelectedIndex() == modelMenuPrincipal.getSize() - 1) {
                selecionado = (String) modelMenuPrincipal.get(listaMenuPrincipal.getSelectedIndex());
            } else {
                selecionado = (String) modelMenuPrincipal.get(listaMenuPrincipal.getSelectedIndex() + 1);
            }
        }

        if (e.getSource().equals(listaMenuOperacoes)) {
            if (listaMenuOperacoes.getSelectedIndex() == modelMenuOperacoes.getSize() - 1) {
                selecionado = (String) modelMenuOperacoes.get(listaMenuOperacoes.getSelectedIndex());
            } else {
                selecionado = (String) modelMenuOperacoes.get(listaMenuOperacoes.getSelectedIndex() + 1);
            }
        }

        if (e.getSource().equals(listaMenuFiscal)) {
            if (listaMenuFiscal.getSelectedIndex() == modelMenuFiscal.getSize() - 1) {
                selecionado = (String) modelMenuFiscal.get(listaMenuFiscal.getSelectedIndex());
            } else {
                selecionado = (String) modelMenuFiscal.get(listaMenuFiscal.getSelectedIndex() + 1);
            }
        }

        mensagens.setText(selecionado);
        this.repaint();
    }

    public void keyTyped(KeyEvent e) {
    }

    public void keyReleased(KeyEvent e) {
    }

    public void componentAdded(ContainerEvent e) {
    }

    public void componentRemoved(ContainerEvent e) {
    }

// ***************************************************************************//
// Métodos para definição dos menus e submenus                                //
// ***************************************************************************//
    private void definirMenuPrincipal() {
        modelMenuPrincipal = new DefaultListModel();
        listaMenuPrincipal.setModel(modelMenuPrincipal);
        modelMenuPrincipal.addElement("Identificar Cliente");
        modelMenuPrincipal.addElement("Calculadora");
        modelMenuPrincipal.addElement(" ");
        modelMenuPrincipal.addElement("Supervisor");
        modelMenuPrincipal.addElement("Gerente");
        modelMenuPrincipal.addElement("Saída Temporária");
    }

    private void definirMenuOperacoes() {
        modelMenuOperacoes = new DefaultListModel();
        listaMenuOperacoes.setModel(modelMenuOperacoes);
        modelMenuOperacoes.addElement("Venda Normal");
        modelMenuOperacoes.addElement("Venda com Desconto");
        modelMenuOperacoes.addElement("Carrega Pré-Venda");
        modelMenuOperacoes.addElement("Mescla Pré-Venda");
        modelMenuOperacoes.addElement("Carrega DAV (Orçamento)");
        modelMenuOperacoes.addElement("Mescla DAV");
    }

    private void definirMenuFiscal() {
        modelMenuFiscal = new DefaultListModel();
        listaMenuFiscal.setModel(modelMenuFiscal);
        modelMenuFiscal.addElement("LX - Leitura X");
        modelMenuFiscal.addElement("<html><center>LMFC - Leitura Memória <br>Fiscal Completa</center></html>");
        modelMenuFiscal.addElement("<html><center>LMFS - Leitura Memória <br>Fiscal Simplificada LMFS</center></html>");
        modelMenuFiscal.addElement("Espelho MFD");
        modelMenuFiscal.addElement("Arquivo MFD");
        modelMenuFiscal.addElement("Tabela de Produtos");
        modelMenuFiscal.addElement("Estoque");
        modelMenuFiscal.addElement("Movimento por ECF");
        modelMenuFiscal.addElement("Meios de Pagamento");
        modelMenuFiscal.addElement("DAV Emitidos");
        modelMenuFiscal.addElement("Identificação do PAF-ECF");
        modelMenuFiscal.addElement("Vendas do Período");
        modelMenuFiscal.addElement("<html><center>Tabela Índice Técnicos <br>de Produção</center></html>");
    }

    private void definirMenuECF() {
        modelMenuECF = new DefaultListModel();
        listaMenuECF.setModel(modelMenuECF);
        modelMenuECF.addElement("Programa Horário de Verão");
    }

    private void definirSubMenuCliente() {
        modelSubMenuCliente = new DefaultListModel();
        listaSubMenuCliente.setModel(modelSubMenuCliente);
        modelSubMenuCliente.addElement("Identificar Cliente");
        modelSubMenuCliente.addElement("Não Identificar");
        modelSubMenuCliente.addElement("Convênio");
    }

    private void definirSubMenuGerente() {
        modelSubMenuGerente = new DefaultListModel();
        listaSubMenuGerente.setModel(modelSubMenuGerente);
        modelSubMenuGerente.addElement("Iniciar Movimento");
        modelSubMenuGerente.addElement("Encerrar Movimento");
        modelSubMenuGerente.addElement("Saída de Operador de Caixa");
        modelSubMenuGerente.addElement(" ");
        modelSubMenuGerente.addElement("Suprimento");
        modelSubMenuGerente.addElement("Sangria");
        modelSubMenuGerente.addElement(" ");
        modelSubMenuGerente.addElement("Acréscimo em Dinheiro no Cupom");
        modelSubMenuGerente.addElement("Acréscimo Percentual no Cupom");
        modelSubMenuGerente.addElement("Desconto em Dinheiro no Cupom");
        modelSubMenuGerente.addElement("Desconto Percentual no Cupom");
        modelSubMenuGerente.addElement("Desconto com Nota de Devolução no Cupom");
        modelSubMenuGerente.addElement(" ");
        modelSubMenuGerente.addElement("Redução Z");
        modelSubMenuGerente.addElement(" ");
        modelSubMenuGerente.addElement("Consultar Cliente");
        modelSubMenuGerente.addElement("Consultar Convênio");
        modelSubMenuGerente.addElement(" ");
        modelSubMenuGerente.addElement("Resumo Financeiro do Operador - Tela");
        modelSubMenuGerente.addElement("Resumo Financeiro do Operador - Impressão");
        modelSubMenuGerente.addElement(" ");
        modelSubMenuGerente.addElement("Saídas por Período - Tela");
        modelSubMenuGerente.addElement("Saídas por Período - Impressão");
        modelSubMenuGerente.addElement(" ");
        modelSubMenuGerente.addElement("Vendas por Produto - Tela");
        modelSubMenuGerente.addElement("Vendas por Produto - Impressão");
        modelSubMenuGerente.addElement(" ");
        modelSubMenuGerente.addElement("Vendas por Produto do Operador - Tela");
        modelSubMenuGerente.addElement("Vendas por Produto do Operador - Impressão");
        modelSubMenuGerente.addElement(" ");
        modelSubMenuGerente.addElement("Importar Tabelas com Dispositivo (pen-drive)");
        modelSubMenuGerente.addElement("Exportar Tabelas com Dispositivo (pen-drive)");
    }

    private void definirSubMenuSupervisor() {
        modelSubMenuSupervisor = new DefaultListModel();
        listaSubMenuSupervisor.setModel(modelSubMenuSupervisor);
        modelSubMenuSupervisor.addElement("Iniciar Movimento");
        modelSubMenuSupervisor.addElement("Encerrar Movimento");
        modelSubMenuSupervisor.addElement("Saída de Operador de Caixa");
        modelSubMenuSupervisor.addElement(" ");
        modelSubMenuSupervisor.addElement("Suprimento");
        modelSubMenuSupervisor.addElement("Sangria");
        modelSubMenuSupervisor.addElement(" ");
        modelSubMenuSupervisor.addElement("Acréscimo em Dinheiro no Cupom");
        modelSubMenuSupervisor.addElement("Acréscimo Percentual no Cupom");
        modelSubMenuSupervisor.addElement("Desconto em Dinheiro no Cupom");
        modelSubMenuSupervisor.addElement("Desconto Percentual no Cupom");
        modelSubMenuSupervisor.addElement("Desconto com Nota de Devolução no Cupom");
        modelSubMenuSupervisor.addElement(" ");
        modelSubMenuSupervisor.addElement("Redução Z");
    }

// ***************************************************************************//
// Métodos referentes ao Menu Principal e seus SubMenus                       //
// ***************************************************************************//
    private void iniciaMovimento() {
        MovimentoController movimento = new MovimentoController();
        movimentoVO = movimento.verificaMovimento();
        if (movimentoVO.getId() != 0) {
            JOptionPane.showMessageDialog(rootPane, "Já existe um movimento em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        } else {
            IniciaMovimento im = new IniciaMovimento(this, true);
            im.setLocationRelativeTo(null);
            im.setVisible(true);
            movimentoVO = im.iniciaMovimento();
        }
    }

    private void encerraMovimento() {
        MovimentoController movimento = new MovimentoController();
        movimentoVO = movimento.verificaMovimento();
        if (movimentoVO.getId() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Não existe movimento aberto!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        } else {
            EncerraMovimento em = new EncerraMovimento(this, true, movimentoVO);
            em.setLocationRelativeTo(null);
            em.setVisible(true);
        }
    }

    private void suprimento() {
        if (statusCaixa == 1) {
            String args[] = new String[1];
            args[0] = "suprimento";
            ValorReal.main(args);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void sangria() {
        if (statusCaixa == 1) {
            String args[] = new String[1];
            args[0] = "sangria";
            ValorReal.main(args);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void acrescimoValor() {
        if (statusCaixa == 1) {
            DescontoAcrescimo da = new DescontoAcrescimo(this, true);
            vendaCabecalhoVO = da.retornaValor(vendaCabecalhoVO, "acrescimoValor");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void acrescimoTaxa() {
        if (statusCaixa == 1) {
            DescontoAcrescimo da = new DescontoAcrescimo(this, true);
            vendaCabecalhoVO = da.retornaValor(vendaCabecalhoVO, "acrescimoTaxa");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void descontoValor() {
        if (statusCaixa == 1) {
            DescontoAcrescimo da = new DescontoAcrescimo(this, true);
            vendaCabecalhoVO = da.retornaValor(vendaCabecalhoVO, "descontoValor");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void descontoTaxa() {
        if (statusCaixa == 1) {
            DescontoAcrescimo da = new DescontoAcrescimo(this, true);
            vendaCabecalhoVO = da.retornaValor(vendaCabecalhoVO, "descontoTaxa");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

// ***************************************************************************//
// Métodos referentes ao Menu Operações e seus SubMenus                       //
// ***************************************************************************//
    private void carregaPreVenda() {
        if (statusCaixa == 1) {
            String args[] = new String[1];
            args[0] = "preVenda";
            ValorInteiro.main(args);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void carregaDAV() {
        if (statusCaixa == 1) {
            String args[] = new String[1];
            args[0] = "dav";
            ValorInteiro.main(args);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void mesclaPreVenda() {
        if (statusCaixa == 1) {
            MesclaPreVenda.main(new String[1]);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void mesclaDAV() {
        if (statusCaixa == 1) {
            MesclaDAV.main(new String[1]);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

// ***************************************************************************//
// Métodos para controle da venda                                             //
// ***************************************************************************//
    private void iniciaVenda() {
        MovimentoController movimento = new MovimentoController();
        VendaController venda = new VendaController();
        movimentoVO = movimento.verificaMovimento();
        if (movimentoVO.getId() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Não existe um movimento aberto!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        } else {
            modelBobina.addElement(repete("-", 48));
            modelBobina.addElement("               ** CUPOM FISCAL **               ");
            modelBobina.addElement(repete("-", 48));
            modelBobina.addElement("ITEM CÓDIGO         DESCRIÇÃO                   ");
            modelBobina.addElement("QTD.     UN      VL.UNIT.(R$) ST     VL.ITEM(R$)");
            modelBobina.addElement(repete("-", 48));
            //
            editCodigo.setEditable(true);
            editQuantidade.setEditable(true);
            mensagens.setText("Venda em andamento...");

            //implementar opção para desabilitar a thread dos banners

            setarImagem("padrao.png");
            itemCupom = 0;
            statusCaixa = 1;
            //
            vendaCabecalhoVO.setIdMovimento(movimentoVO.getId());
            vendaCabecalhoVO.setIdCaixa(movimentoVO.getIdCaixa());
            vendaCabecalhoVO.setIdOperador(movimentoVO.getIdOperador());
            vendaCabecalhoVO.setIdImpressora(movimentoVO.getIdImpressora());
            Date data = Date.valueOf(formato.format(d));
            vendaCabecalhoVO.setDataHoraVenda(data);
            vendaCabecalhoVO = venda.iniciaVenda(vendaCabecalhoVO);

            editCodigo.requestFocus();
            editCodigo.selectAll();
        }
    }

    private void vendeItem() {
        VendaController venda = new VendaController();

        itemCupom++;

        //linha 1 do item
        modelBobina.addElement(
                repete("0", 3 - String.valueOf(itemCupom).length()) + itemCupom
                + "  " + editCodigo.getText() + repete(" ", 14 - editCodigo.getText().length())
                + labelDescricao.getText());

        //linha 2 do item
        modelBobina.addElement(
                repete(" ", 8 - editQuantidade.getText().length()) + editQuantidade.getText() + " UN " + " x "
                + repete(" ", 14 - editValorUnitario.getText().length()) + editValorUnitario.getText() + " ST "
                + repete(" ", 14 - editValorTotal.getText().length()) + editValorTotal.getText());

        VendaDetalheVO vendaDetalheVO = new VendaDetalheVO();
        vendaDetalheVO.setIdVendaCabecalho(vendaCabecalhoVO.getId());
        vendaDetalheVO.setIdProduto(produtoVO.getId());
        vendaDetalheVO.setIdCFOP(1);
        vendaDetalheVO.setIdTributo(1);
        vendaDetalheVO.setQuantidade(Double.parseDouble(editQuantidade.getText()));
        vendaDetalheVO.setValorUnitario(Double.parseDouble(editValorUnitario.getText()));
        vendaDetalheVO.setValorTotal(Double.parseDouble(editValorTotal.getText()));
        vendaDetalheVO.setMovimentaEstoque(produtoVO.getMovimentaEstoque());
        listaVendaDetalheVO.add(vendaDetalheVO);

        venda.inserirItem(vendaDetalheVO);
    }

    private void atualizaTotais() {
        subTotal = subTotal + Double.valueOf(editValorTotal.getText());
        totalGeral = totalGeral + Double.valueOf(editValorTotal.getText());
        editSubTotal.setText(subTotal.toString());
        labelTotalGeral.setText(totalGeral.toString());
    }

    private void iniciaEncerramentoVenda() {
        if (statusCaixa == 1) {
            EfetuaPagamento ep = new EfetuaPagamento(this, true, vendaCabecalhoVO);
            ep.setLocationRelativeTo(null);
            ep.setVisible(true);
            concluiEncerrramentoVenda();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void concluiEncerrramentoVenda() {
        VendaController venda = new VendaController();
        vendaCabecalhoVO.setValorVenda(totalGeral);
        venda.encerraVenda(vendaCabecalhoVO);
        statusCaixa = 0;
        telaPadrao();
    }

    private void cancelaCupom() {
        if (statusCaixa == 1) {
            String[] opcoes = {"Sim", "Não"};
            int escolha = JOptionPane.showOptionDialog(null, "Deseja cancelar o cupom atual?", "Pergunta do Sistema",
                    JOptionPane.YES_OPTION, JOptionPane.ERROR_MESSAGE,
                    null, opcoes, null);
            if (escolha == 0) {
                Ecf.cancelaCupom();
                statusCaixa = 0;
                telaPadrao();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe venda em andamento!", "Aviso do Sistema", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void cancelaItem() {
        Integer item = Integer.valueOf(JOptionPane.showInputDialog("Qual item deseja cancelar?"));
        item = (item * 2 - 2) + 6;
        modelBobina.addElement(repete("*", 48));
        modelBobina.addElement(modelBobina.getElementAt(item));
        modelBobina.addElement("ITEM CANCELADO");
        modelBobina.addElement(repete("*", 48));
        Double totalItem = Double.valueOf((modelBobina.getElementAt(item + 1)).toString().substring(38, 48));
        totalGeral = totalGeral - totalItem;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList bobina;
    private javax.swing.JFormattedTextField editCodigo;
    private javax.swing.JFormattedTextField editQuantidade;
    private javax.swing.JFormattedTextField editSubTotal;
    private javax.swing.JFormattedTextField editValorTotal;
    private javax.swing.JFormattedTextField editValorUnitario;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel labelDescricao;
    private javax.swing.JLabel labelImagemProduto;
    private javax.swing.JLabel labelTotalGeral;
    private javax.swing.JList listaMenuECF;
    private javax.swing.JList listaMenuFiscal;
    private javax.swing.JList listaMenuOperacoes;
    private javax.swing.JList listaMenuPrincipal;
    private javax.swing.JList listaSubMenuCliente;
    private javax.swing.JList listaSubMenuGerente;
    private javax.swing.JList listaSubMenuSupervisor;
    private javax.swing.JLabel mensagens;
    private javax.swing.JPanel panelCard;
    private javax.swing.JPanel panelMenuECF;
    private javax.swing.JPanel panelMenuFiscal;
    private javax.swing.JPanel panelMenuOperacoes;
    private javax.swing.JPanel panelMenuPrincipal;
    private javax.swing.JPanel panelSubMenu;
    // End of variables declaration//GEN-END:variables
}

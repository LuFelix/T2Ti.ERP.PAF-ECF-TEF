package com.t2tierp.pafecf.view;

import com.t2tierp.pafecf.controller.ConfiguracaoController;
import com.t2tierp.pafecf.infra.ConfiguracaoComponenteModel;
import com.t2tierp.pafecf.infra.ConfiguracaoEditorLayoutTelaModel;
import com.t2tierp.pafecf.infra.ConfiguracaoEditorLayoutTelaModelListener;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.AbstractListModel;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.DefaultButtonModel;
import javax.swing.JOptionPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * Classe Configuracao2 (View + Controller).
 *
 * @author Leonardo Ono
 * @version 1.0 (20/11/2010)
 */
public class Configuracao2 extends javax.swing.JFrame 
    implements ConfiguracaoEditorLayoutTelaModelListener
    , ListSelectionListener {
    
    private ConfiguracaoController configuracaoControl
            = new ConfiguracaoController();

    private ConfiguracaoEditorLayoutTelaModel model
            = new ConfiguracaoEditorLayoutTelaModel();

    private ConfiguracaoEditorLayoutTelaPanel view1;


    /** Creates new form Configuracao2 */
    @SuppressWarnings("LeakingThisInConstructor")
    public Configuracao2() {
        initComponents();
        model.setListaDePosicaoComponentesVO(
                configuracaoControl.verificaPosicaoTamanho());
         
        model.addConfiguracaoEditorLayoutTelaModelListener(this);

        view1 = new ConfiguracaoEditorLayoutTelaPanel(model);
        view1.setSize(1024, 768);
        view1.setMinimumSize(new Dimension(1024, 768));
        jScrollPane1.setViewportView(view1);
        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants
                .HORIZONTAL_SCROLLBAR_ALWAYS);

        jScrollPane1.setVerticalScrollBarPolicy(ScrollPaneConstants
                .VERTICAL_SCROLLBAR_ALWAYS);

        jList1.setModel(new AbstractListModel() {

            @Override
            public int getSize() {
                return view1.getComponentes().size();
            }

            @Override
            @SuppressWarnings("element-type-mismatch")
            public Object getElementAt(int index) {
                return view1.getComponentes().get(
                        view1.getComponentes().keySet().toArray()[index]);
            }
        });
        jList1.addListSelectionListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("Redo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Undo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jCheckBox1.setText("Exibir gride");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 707, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            model.voltarHistorico();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            model.avancarHistorico();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        System.out.println("jCheckBox1StateChanged");
        model.setGrideVisivel(jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Configuracao2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    // ConfiguracaoEditorLayoutTelaModelListener
    
    @Override
    public void historicoFoiSalvo(int indice, String descricao) {
    }

    @Override
    public void historicoFoiAvancado(int indice, String descricao) {
    }

    @Override
    public void historicoFoiVoltado(int indice, String descricao) {
    }

    @Override
    public void tamanhoDoConfiguracaoComponenteModelFoiAlterado(
            ConfiguracaoComponenteModel componenteModel) {
    }

    @Override
    public void posicaoDoConfiguracaoComponenteModelFoiAlterada(
            ConfiguracaoComponenteModel componenteModel) {
    }

    @Override
    public void configuracaoComponenteModelFoiSelecionado(
            ConfiguracaoComponenteModel componenteModel) {

        //jList1.setSelectedValue(componenteModel, true);
        System.out.println(">>>>>configuracaoComponenteModelFoiSelecionado");
    }
  
    @Override
    public void configuracaoComponenteModelFoiDesselecionado(
            ConfiguracaoComponenteModel componenteModel) {

       // jList1.setSelectedValue(null, false);
        System.out.println(">>>>>configuracaoComponenteModelFoiSelecionado");
    }
 
    @Override
    public void textoDoConfiguracaoComponenteModelFoiAlterado(
            ConfiguracaoComponenteModel componenteModel) {
    }

    @Override
    public void fonteDoConfiguracaoComponenteModelFoiAlterada(
            ConfiguracaoComponenteModel componenteModel) {
    }

    @Override
    public void flagDeslocavelDoConfiguracaoComponenteModelFoiAlterada(
            ConfiguracaoComponenteModel componenteModel) {
    }

    @Override
    public void flagRedimensionavelDoConfiguracaoComponenteModelFoiAlterada(
            ConfiguracaoComponenteModel componenteModel) {
    }

    @Override
    public void flagSelecionadoDoConfiguracaoComponenteModelFoiAlterada(
            ConfiguracaoComponenteModel componenteModel) {

        System.out.println("--->" + componenteModel);
    }
 
    @Override
    public void valueChanged(ListSelectionEvent e) {
        model.setComponenteModelSelecionado((ConfiguracaoComponenteModel) 
            ((Componente) jList1.getSelectedValue())
            .getConfiguracaoComponenteModel());
    }

    @Override
    public void visibilidadeDaGrideAlterada() {
    }

    @Override
    public void tamanhoDaGrideAlterada() {
    }
 
}
